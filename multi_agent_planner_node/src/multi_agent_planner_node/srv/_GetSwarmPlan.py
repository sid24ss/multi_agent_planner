"""autogenerated by genpy from multi_agent_planner_node/GetSwarmPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetSwarmPlanRequest(genpy.Message):
  _md5sum = "42f8041ca0c451e29c96c13bdbe88599"
  _type = "multi_agent_planner_node/GetSwarmPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 planning_mode
float64 allocated_planning_time

float64[] swarm_start
float64[] swarm_goal


float64 tolerance

float64 initial_eps
float64 final_eps
float64 dec_eps

int8 sbpl_planner
int8 planner_type
int8 meta_search_type


"""
  __slots__ = ['planning_mode','allocated_planning_time','swarm_start','swarm_goal','tolerance','initial_eps','final_eps','dec_eps','sbpl_planner','planner_type','meta_search_type']
  _slot_types = ['int8','float64','float64[]','float64[]','float64','float64','float64','float64','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planning_mode,allocated_planning_time,swarm_start,swarm_goal,tolerance,initial_eps,final_eps,dec_eps,sbpl_planner,planner_type,meta_search_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSwarmPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.allocated_planning_time is None:
        self.allocated_planning_time = 0.
      if self.swarm_start is None:
        self.swarm_start = []
      if self.swarm_goal is None:
        self.swarm_goal = []
      if self.tolerance is None:
        self.tolerance = 0.
      if self.initial_eps is None:
        self.initial_eps = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.dec_eps is None:
        self.dec_eps = 0.
      if self.sbpl_planner is None:
        self.sbpl_planner = 0
      if self.planner_type is None:
        self.planner_type = 0
      if self.meta_search_type is None:
        self.meta_search_type = 0
    else:
      self.planning_mode = 0
      self.allocated_planning_time = 0.
      self.swarm_start = []
      self.swarm_goal = []
      self.tolerance = 0.
      self.initial_eps = 0.
      self.final_eps = 0.
      self.dec_eps = 0.
      self.sbpl_planner = 0
      self.planner_type = 0
      self.meta_search_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.planning_mode, _x.allocated_planning_time))
      length = len(self.swarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.swarm_start))
      length = len(self.swarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.swarm_goal))
      _x = self
      buff.write(_struct_4d3b.pack(_x.tolerance, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.sbpl_planner, _x.planner_type, _x.meta_search_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.planning_mode, _x.allocated_planning_time,) = _struct_bd.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.swarm_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.swarm_goal = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 35
      (_x.tolerance, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.sbpl_planner, _x.planner_type, _x.meta_search_type,) = _struct_4d3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.planning_mode, _x.allocated_planning_time))
      length = len(self.swarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.swarm_start.tostring())
      length = len(self.swarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.swarm_goal.tostring())
      _x = self
      buff.write(_struct_4d3b.pack(_x.tolerance, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.sbpl_planner, _x.planner_type, _x.meta_search_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.planning_mode, _x.allocated_planning_time,) = _struct_bd.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.swarm_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.swarm_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 35
      (_x.tolerance, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.sbpl_planner, _x.planner_type, _x.meta_search_type,) = _struct_4d3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bd = struct.Struct("<bd")
_struct_4d3b = struct.Struct("<4d3b")
"""autogenerated by genpy from multi_agent_planner_node/GetSwarmPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetSwarmPlanResponse(genpy.Message):
  _md5sum = "c0148d4074ae6aff7c49dde653eb6dc5"
  _type = "multi_agent_planner_node/GetSwarmPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

string[] stats_field_names
float64[] stats


"""
  __slots__ = ['stats_field_names','stats']
  _slot_types = ['string[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stats_field_names,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSwarmPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stats_field_names is None:
        self.stats_field_names = []
      if self.stats is None:
        self.stats = []
    else:
      self.stats_field_names = []
      self.stats = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.stats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.stats.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class GetSwarmPlan(object):
  _type          = 'multi_agent_planner_node/GetSwarmPlan'
  _md5sum = 'a841673a82e79b1e83929033134098f9'
  _request_class  = GetSwarmPlanRequest
  _response_class = GetSwarmPlanResponse
