/* Auto-generated by genmsg_cpp for file /home/siddharth/ros-packages/multiagent/multi_agent_planner/multi_agent_planner_node/srv/GetSwarmPlan.srv */
#ifndef MULTI_AGENT_PLANNER_NODE_SERVICE_GETSWARMPLAN_H
#define MULTI_AGENT_PLANNER_NODE_SERVICE_GETSWARMPLAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace multi_agent_planner_node
{
template <class ContainerAllocator>
struct GetSwarmPlanRequest_ {
  typedef GetSwarmPlanRequest_<ContainerAllocator> Type;

  GetSwarmPlanRequest_()
  : planning_mode(0)
  , allocated_planning_time(0.0)
  , swarm_start()
  , swarm_goal()
  , tolerance(0.0)
  , initial_eps(0.0)
  , final_eps(0.0)
  , dec_eps(0.0)
  , planner_type(0)
  , meta_search_type(0)
  {
  }

  GetSwarmPlanRequest_(const ContainerAllocator& _alloc)
  : planning_mode(0)
  , allocated_planning_time(0.0)
  , swarm_start(_alloc)
  , swarm_goal(_alloc)
  , tolerance(0.0)
  , initial_eps(0.0)
  , final_eps(0.0)
  , dec_eps(0.0)
  , planner_type(0)
  , meta_search_type(0)
  {
  }

  typedef int8_t _planning_mode_type;
  int8_t planning_mode;

  typedef double _allocated_planning_time_type;
  double allocated_planning_time;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _swarm_start_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  swarm_start;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _swarm_goal_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  swarm_goal;

  typedef double _tolerance_type;
  double tolerance;

  typedef double _initial_eps_type;
  double initial_eps;

  typedef double _final_eps_type;
  double final_eps;

  typedef double _dec_eps_type;
  double dec_eps;

  typedef int8_t _planner_type_type;
  int8_t planner_type;

  typedef int8_t _meta_search_type_type;
  int8_t meta_search_type;


  typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSwarmPlanRequest
typedef  ::multi_agent_planner_node::GetSwarmPlanRequest_<std::allocator<void> > GetSwarmPlanRequest;

typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanRequest> GetSwarmPlanRequestPtr;
typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanRequest const> GetSwarmPlanRequestConstPtr;



template <class ContainerAllocator>
struct GetSwarmPlanResponse_ {
  typedef GetSwarmPlanResponse_<ContainerAllocator> Type;

  GetSwarmPlanResponse_()
  : stats_field_names()
  , stats()
  {
  }

  GetSwarmPlanResponse_(const ContainerAllocator& _alloc)
  : stats_field_names(_alloc)
  , stats(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _stats_field_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  stats_field_names;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _stats_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  stats;


  typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSwarmPlanResponse
typedef  ::multi_agent_planner_node::GetSwarmPlanResponse_<std::allocator<void> > GetSwarmPlanResponse;

typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanResponse> GetSwarmPlanResponsePtr;
typedef boost::shared_ptr< ::multi_agent_planner_node::GetSwarmPlanResponse const> GetSwarmPlanResponseConstPtr;


struct GetSwarmPlan
{

typedef GetSwarmPlanRequest Request;
typedef GetSwarmPlanResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetSwarmPlan
} // namespace multi_agent_planner_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e447130288004f6271471743fe509221";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe447130288004f62ULL;
  static const uint64_t static_value2 = 0x71471743fe509221ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multi_agent_planner_node/GetSwarmPlanRequest";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 planning_mode\n\
float64 allocated_planning_time\n\
\n\
\n\
float64[] swarm_start\n\
float64[] swarm_goal\n\
\n\
\n\
float64 tolerance\n\
\n\
float64 initial_eps\n\
float64 final_eps\n\
float64 dec_eps\n\
\n\
int8 planner_type\n\
int8 meta_search_type\n\
\n\
\n\
";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c0148d4074ae6aff7c49dde653eb6dc5";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc0148d4074ae6affULL;
  static const uint64_t static_value2 = 0x7c49dde653eb6dc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multi_agent_planner_node/GetSwarmPlanResponse";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
string[] stats_field_names\n\
float64[] stats\n\
\n\
\n\
";
  }

  static const char* value(const  ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.planning_mode);
    stream.next(m.allocated_planning_time);
    stream.next(m.swarm_start);
    stream.next(m.swarm_goal);
    stream.next(m.tolerance);
    stream.next(m.initial_eps);
    stream.next(m.final_eps);
    stream.next(m.dec_eps);
    stream.next(m.planner_type);
    stream.next(m.meta_search_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSwarmPlanRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stats_field_names);
    stream.next(m.stats);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSwarmPlanResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<multi_agent_planner_node::GetSwarmPlan> {
  static const char* value() 
  {
    return "b7f0a26069c6e8c4eb641e5486a11198";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlan&) { return value(); } 
};

template<>
struct DataType<multi_agent_planner_node::GetSwarmPlan> {
  static const char* value() 
  {
    return "multi_agent_planner_node/GetSwarmPlan";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlan&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b7f0a26069c6e8c4eb641e5486a11198";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multi_agent_planner_node/GetSwarmPlan";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b7f0a26069c6e8c4eb641e5486a11198";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multi_agent_planner_node/GetSwarmPlan";
  }

  static const char* value(const multi_agent_planner_node::GetSwarmPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MULTI_AGENT_PLANNER_NODE_SERVICE_GETSWARMPLAN_H

